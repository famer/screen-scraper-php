<?php

/**
 * DailyWeather
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class DailyWeather extends BaseDailyWeather
{

  protected $dom;
  protected $pageString;

  protected $xpathGraph = '//xhtml:table[@class="forecast_table"]/xhtml:tr[7]/xhtml:td[10]/xhtml:img[1]/@src';
  protected $xpathMinTemperature = '//xhtml:table[@class="forecast_table"]/xhtml:tr[3]/xhtml:td[2]';
  protected $xpathMaxTemperature = '//xhtml:table[@class="forecast_table"]/xhtml:tr[7]/xhtml:td[2]';
  protected $xpathPrecipitation = '//xhtml:table[@class="forecast_table"]/xhtml:tr[7]/xhtml:td[7]';
  protected $xpathDescription_ = '//xhtml:table[@class="forecast_table"]/xhtml:tr[(position()-1) mod 2 = 0]/xhtml:td[11]';
  protected $xpathDescription = '//xhtml:table[@class="forecast_table"]/xhtml:tr[7]/xhtml:td[11]';
  protected $xpathGeDescription_ = '//xhtml:table[@class="forecast_table"]/xhtml:tr[(position()-1) mod 2 = 0]/xhtml:td[11]';
  protected $xpathGeDescription = '//xhtml:table[@class="forecast_table"]/xhtml:tr[7]/xhtml:td[11]';
  protected $xpathDate = '//xhtml:title';
  
  // Load from pageString
  public function loadFromString ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $this->fetchGraph();
    $this->fetchMinTemperature();
    $this->fetchMaxTemperature();
    $this->fetchPrecipitation();
    $this->fetchDescription();
    $this->fetchGeDescription();
    $this->fetchDate();

    return $this;


  }

  // Load dom from url
  public function loadFromUrl ( $url = NULL ) {
    if ( !$url ) return false;

    $pageString = file_get_contents ( $url );
    $this->loadFromString ( $pageString );
    // FIX: perhaps wrong descision
    return $this;
  }
 
  // Transforms string to tidy dom object
  public function fetchDom ( $pageString = NULL ) {
    if ( !$pageString ) return false;

    $xhtml = (string) tidy_repair_string($pageString, array("numeric-entities" => true, "output-xhtml" => true), 'utf8') ;
    $dom = simplexml_load_string($xhtml);
    $dom->registerXPathNamespace("xhtml", "http://www.w3.org/1999/xhtml");
    return $dom;

  }


  public function saveOrUpdate () {

  }


  // Rounds value and adds sign "+" if needed
  public function getMaxTemperature() {
    $originalValue = $this->_get('maxTemperature');
    if ( $originalValue > 0)
      $sign = '+';

    return $sign.floor($originalValue);
  }

  // Rounds value and adds sign "+" if needed
  public function getMinTemperature() {
    $originalValue = $this->_get('minTemperature');
    if ( $originalValue > 0)
      $sign = '+';

    return $sign.floor($originalValue);
  }

  // Fetches needed data from string
  public function fetchGraph ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathGraph));
    $this->graph = reset(explode('.', trim ( basename ( $data ) ) ) ) ;
    return $this->graph;

  }

  // Fetches needed data from string
  public function fetchMinTemperature ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathMinTemperature));
    $this->minTemperature = floatval ( $data ) ;
    return $this->minTemperature;

  }

  // Fetches needed data from string
  public function fetchMaxTemperature ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathMaxTemperature));
    $this->maxTemperature = floatval ( $data ) ;
    return $this->maxTemperature;

  }

  // Fetches needed data from string
  public function fetchPrecipitation ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathPrecipitation));
    $this->precipitation = intval ( $data ) ;
    return $this->precipitation;

  }

  // Fetches needed data from string
  public function fetchDescription ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }
    foreach ( $this->dom->xpath($this->xpathDescription) as $value ) {
      $data .= $value;
    }
    //$data = array_shift($this->dom->xpath($this->xpathDescription));
    $this->description = trim ( $data ) ;
    return $this->description;

  }

  // Fetches needed data from string
  public function fetchGeDescription ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }
    foreach ( $this->dom->xpath($this->xpathGeDescription) as $value ) {
      $data .= Lang::engToGeDescription ( $value );
    }

    $this->geDescription =  $data ;
    return $this->geDescription;

  }

  // Fetches needed data from string
  public function fetchDate ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathDate));

    preg_match( '/.*,(.+)-/', $data->asXML(), $matches );

    $data = strtotime ( $matches[1] );
    $data = date('Y-m-d', $data);

    $this->date = $data;
    return $this->date;

  }


}

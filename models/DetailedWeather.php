<?php

/**
 * DetailedWeather
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class DetailedWeather extends BaseDetailedWeather
{

  protected $dom;
  protected $pageString;

  // Load from pageString
  public function loadFromString ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $this->fetchTime();
    $this->fetchTemperature();
    $this->fetchWindDirectionLang();
    $this->fetchWindSpeed();
    $this->fetchCloud();
    $this->fetchPrecipitation();
    $this->fetchHumidity();
    $this->fetchPressureTorr();
    $this->fetchDescription();
    $this->fetchGeDescription();
    $this->fetchGraph();

    return $this;


  }

  // Remove object if bad parse
  public function preSave() {
    if ( !$this->time )
      $this->delete();
  }

  // Load dom from url
  public function loadFromUrl ( $url = NULL ) {
    if ( !$url ) return false;

    $pageString = file_get_contents ( $url );
    $this->loadFromString ( $pageString );
    // FIX: perhaps wrong descision
    return $this;
  }
 
  // Remove seconds from time
  public function getTime() {
    $originalValue = $this->_get('time');
    return substr($originalValue, 0, 5);
  }

  // Rounds value and adds sign "+" if needed
  public function getTemperature() {
    $originalValue = $this->_get('temperature');
    if ( $originalValue == NULL) return NULL;
    if ( floor ( $originalValue ) > 0)
      $sign = '+';

    return $sign.floor($originalValue);
  }

  // Rounds value of pressureTorr
  public function getPressureTorr() {
    $originalValue = $this->_get('pressureTorr');

    return round($originalValue, 1);
  }

  // Fake geWindDirectionLang
  public function getGeWindDirectionLang () {
    return Lang::engToGeWindDirectionLang( $this->_get('windDirectionLang') );
  }

  // Transforms string to tidy dom object
  public function fetchDom ( $pageString = NULL ) {
    if ( !$pageString ) return false;

    $xhtml = (string) tidy_repair_string($pageString, array("numeric-entities" => true, "output-xhtml" => true), 'utf8') ;
    $dom = simplexml_load_string($xhtml);
    $dom->registerXPathNamespace("xhtml", "http://www.w3.org/1999/xhtml");
    return $dom;

  }

  // Fetches needed data from string
  public function fetchTime ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathTime));
    $this->time = trim ( $data ) ;
    return $this->time;

  }

  // Fetches needed data from string
  public function fetchGraph ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathGraph));
    $this->graph = reset(explode('.', trim ( basename ( $data ) ) ) ) ;
    return $this->graph;

  }

  // Fetches needed data from string
  public function fetchCloud ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathCloud));
    $this->cloud = intval ( $data ) ;
    return $this->cloud;

  }

  // Fetches needed data from string
  public function fetchTemperature ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathTemperature));
    $this->temperature = floatval ( $data ) ;
    return $this->temperature;

  }

  // Fetches needed data from string
  public function fetchDescription ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathDescription));
    $this->description = trim ( $data ) ;
    return $this->description;

  }

  // Fetches needed data from string
  public function fetchGeDescription ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }
    $data = array_shift($this->dom->xpath($this->xpathGeDescription));
    $data = Lang::engToGeDescription ( $data );

    $this->geDescription =  $data ;
    return $this->geDescription;

  }

  // Fetches needed data from string
  public function fetchPressureMB ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathPressureMB));
    $this->pressureMB = floatval ( $data ) ;
    return $this->pressureMB;

  }

  public function fetchPressureTorr ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    $data = $this->fetchPressureMB($pageString);
    $this->pressureTorr = $data * 0.75006375541921;
    return $this->pressureTorr;
  }


  // Fetches needed data from string
  public function fetchPrecipitation ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathPrecipitation));
    $this->precipitation = intval ( $data ) ;
    return $this->precipitation;

  }

  // Fetches needed data from string
  public function fetchHumidity ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathHumidity));
    $this->humidity = intval ( $data ) ;
    return $this->humidity;

  }

  // Fetches needed data from string
  public function fetchWindDirectionDegrees ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathWindDirectionDegrees));
    $this->windDirectionDegrees = intval ( $data ) ;
    return $this->windDirectionDegrees;

  }

  public function fetchWindDirectionLang ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    $degrees = $this->fetchWindDirectionDegrees($pageString);

    if ( $degrees > 360 || $degrees < 0) 
      return false;

    switch ( true ) {
      case ( $degrees > 348.75 || $degrees <= 11.25) :
        $direction = 'N';
        break;
      case ( $degrees > 11.25 && $degrees <= 33.75) :
        $direction = 'NNE';
        break;
      case ( $degrees > 33.75 && $degrees <= 56.25) :
        $direction = 'NE';
        break;
      case ( $degrees > 56.25 && $degrees <= 78.75) :
        $direction = 'ENE';
        break;
      case ( $degrees > 78.75 && $degrees <= 101.25) :
        $direction = 'E';
        break;
      case ( $degrees > 101.25 && $degrees <= 123.75) :
        $direction = 'ESE';
        break;
      case ( $degrees > 123.75 && $degrees <= 146.25) :
        $direction = 'SE';
        break;
      case ( $degrees > 146.25 && $degrees <= 168.75) :
        $direction = 'SSE';
        break;
      case ( $degrees > 168.75 && $degrees <= 191.25) :
        $direction = 'S';
        break;
      case ( $degrees > 191.25 && $degrees <= 213.75) :
        $direction = 'SSW';
        break;
      case ( $degrees > 213.75 && $degrees <= 236.25) :
        $direction = 'SW';
        break;
      case ( $degrees > 236.25 && $degrees <= 258.75) :
        $direction = 'WSW';
        break;
      case ( $degrees > 258.75 && $degrees <= 281.25) :
        $direction = 'W';
        break;
      case ( $degrees > 281.25 && $degrees <= 303.75) :
        $direction = 'WNW';
        break;
      case ( $degrees > 303.75 && $degrees <= 326.25) :
        $direction = 'NW';
        break;
      case ( $degrees > 326.25 && $degrees <= 348.75) :
        $direction = 'NNW';
        break;
      default:
        $direction = false;
    }
    $this->windDirectionLang = $direction;
    return  $this->windDirectionLang;
  }

  // Fetches needed data from string
  public function fetchWindSpeed ( $pageString = NULL ) {
    if ( !$this->dom && !$pageString ) return false;

    if ( $pageString ) {
      $this->dom = $this->fetchDom($pageString);
    }

    $data = array_shift($this->dom->xpath($this->xpathWindSpeed));
    $this->windSpeed = intval ( $data ) ;
    return $this->windSpeed;

  }
}
